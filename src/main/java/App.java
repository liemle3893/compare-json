import java.util.Map;

import com.google.common.collect.MapDifference;
import com.google.common.collect.Maps;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private final Gson GSON = new GsonBuilder().create();

    public boolean isDifference(final String path, Map<String, Object> oldData, Map<String, Object> newData) {
        MapDifference<String, Object> difference = Maps.difference(oldData, newData);
        difference.entriesOnlyOnLeft().forEach((key, value) -> {
            publishChange(Action.REMOVE, path, key, value);
        });
        difference.entriesOnlyOnRight().forEach((key, value) -> {
            publishChange(Action.ADD, path, key, value);
        });
        difference.entriesDiffering().forEach((key, value) -> {
            if (value.rightValue() instanceof Map && value.leftValue() instanceof Map) {
                if (!path.isEmpty()) {
                    key = path.concat("-").concat(key);
                }
                isDifference(key, (Map) value.leftValue(), (Map) value.rightValue());
            } else {
                publishChange(Action.MODIFY, path, key, value);
            }
        });
        return !difference.areEqual();
    }

    public void publishChange(Action action, String path, String key, Object value) {
        if (value instanceof MapDifference.ValueDifference) {
            value = ((MapDifference.ValueDifference) value).rightValue();
        }
        JsonElement jsonValue = GSON.toJsonTree(value);
        String event = createEvent(action, path, key, jsonValue);
        System.out.println("Differrence: " + event);
    }

    public String createEvent(Action action, String paths, String key, JsonElement value) {
        JsonObject root = new JsonObject();
        JsonArray arrPaths = new JsonArray();
        for (String path : paths.split("-")) {
            arrPaths.add(path);
        }
        root.addProperty("action", action.toString());
        root.add("paths", arrPaths);
        JsonObject data = new JsonObject();
        data.addProperty("key", key);
        data.add("value", value);
        root.add("data", data);
        return root.toString();
    }

    public static enum Action {
        ADD, REMOVE, MODIFY
    }
}
